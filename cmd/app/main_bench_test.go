package main

import (
	"github.com/Borislavv/ip-file-counter/internal/read"
	"os"
	"runtime"
	"testing"
)

// default mock IPs file path
var benchFilePath = "../../ips_autogenerated_mock_1MiB_total-73429_unique-42573.txt"

func benchFile(b *testing.B) string {
	if _, err := os.Stat(benchFilePath); err != nil {
		b.Fatalf("stat %s: %v", benchFilePath, err)
	}
	return benchFilePath
}

func runCountBench(b *testing.B, readers, shards int) {
	path := benchFile(b)

	fi, err := os.Stat(path)
	if err != nil {
		b.Fatal(err)
	}

	b.SetBytes(fi.Size())
	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		if _, err := read.UniqueIPv4Count(path, shards, readers, 32, 1); err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkCount_Serial(b *testing.B) {
	runCountBench(b, 1, 1)
}

func BenchmarkCount_Defaults(b *testing.B) {
	runCountBench(b, 0, 0)
}

func BenchmarkCount_Throughput(b *testing.B) {
	R := min(runtime.GOMAXPROCS(0), 8)
	S := min(runtime.GOMAXPROCS(0)*4, 64)
	runCountBench(b, R, S)
}
